<!--
$PostgreSQL: pgsql/doc/src/sgml/ref/create_trigger.sgml,v 1.40 2004/11/27 21:27:07 petere Exp $
PostgreSQL documentation
-->

<refentry id="SQL-CREATETRIGGER">
 <refmeta>
  <refentrytitle id="SQL-CREATETRIGGER-TITLE">CREATE TRIGGER</refentrytitle>
  <refmiscinfo>SQL - Comandos da Linguagem</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TRIGGER</refname>
  <refpurpose>cria um gatilho</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createtrigger">
  <primary>CREATE TRIGGER</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE TRIGGER <replaceable class="parameter">nome</replaceable> { BEFORE | AFTER } { <replaceable class="parameter">evento</replaceable> [ OR ... ] }
    ON <replaceable class="parameter">tabela</replaceable> [ FOR [ EACH ] { ROW | STATEMENT } ]
    EXECUTE PROCEDURE <replaceable class="parameter">nome_da_função</replaceable> ( <replaceable class="parameter">argumentos</replaceable> )
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Descrição</title>

  <para>
   O comando <command>CREATE TRIGGER</command> cria um gatilho.
   O gatilho fica associado à tabela especificada e executa a função
   especificada <replaceable class="parameter">nome_da_função</replaceable>
   quando determinados eventos ocorrem.
  </para>

  <para>
   O gatilho pode ser especificado para disparar antes de tentar
   realizar a operação na linha (antes das restrições serem verificadas e
   o comando <command>INSERT</command>, <command>UPDATE</command> ou
   <command>DELETE</command> ser tentado), ou após a operação
   estar completa (após as restrições serem verificadas e o
   <command>INSERT</command>, <command>UPDATE</command> ou
   <command>DELETE</command> ter completado). Se o gatilho for disparado antes
   do evento, o gatilho pode evitar a operação para a linha corrente,
   ou modificar a linha sendo inserida (para as operações de
   <command>INSERT</command> e <command>UPDATE</command> somente).
   Se o gatilho for disparado após o evento, todas as mudanças, incluindo
   a última inserção, atualização ou exclusão, são
   <quote>visíveis</quote> para o gatilho.
  </para>

  <para>
   Se o gatilho estiver marcado como <literal>FOR EACH ROW</literal> então
   é chamado uma vez para cada linha modificada pela operação. Por exemplo,
   um comando <command>DELETE</command> afetando 10 linhas faz com que todos os
   gatilhos <literal>ON DELETE</literal> da relação de destino sejam chamados
   10 vezes, uma vez para cada linha excluída. Por outro lado,
   um gatilho marcado como <literal>FOR EACH STATEMENT</literal> somente
   executa uma vez para uma determinada operação, a despeito de quantas linhas
   sejam modificadas; em particular, uma operação que não modifica nenhuma linha
   ainda assim resulta na execução de todos os gatilhos <literal>FOR
   EACH STATEMENT</literal> aplicáveis.
  </para>

  <para>
   Se vários gatilhos do mesmo tipo estão definidos para o mesmo evento,
   estes são disparados na ordem alfabética de seus nomes.
  </para>

  <para>
  O <command>SELECT</command> não modifica nenhuma linha e, portanto, não é
  possível criar gatilhos para <command>SELECT</command>. Regras e visões são
  mais apropriadas neste caso.
  </para>

  <para>
   Consulte o <xref linkend="triggers">
   para obter informações adicionais sobre gatilhos.
  </para>
 </refsect1>

 <refsect1>
  <title>Parâmetros</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nome</replaceable></term>
    <listitem>
     <para>
      O nome a ser dado ao novo gatilho, devendo ser distinto do nome
      de qualquer outro gatilho para a mesma tabela.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BEFORE</literal></term>
    <term><literal>AFTER</literal></term>
    <listitem>
     <para>
      Determina se a função é chamada antes ou depois do
      evento.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">evento</replaceable></term>
    <listitem>
     <para>
      Um entre <command>INSERT</command>, <command>UPDATE</command> ou
      <command>DELETE</command>; especifica o evento que
      dispara o gatilho. Vários eventos podem ser especificados utilizando
      <literal>OR</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">tabela</replaceable></term>
    <listitem>
     <para>
      O nome (opcionalmente qualificado pelo esquema)
      da tabela que o gatilho se destina.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FOR EACH ROW</literal></term>
    <term><literal>FOR EACH STATEMENT</literal></term>

    <listitem>
     <para>
      Especifica se o procedimento do gatilho deve ser disparado uma vez
      para cada linha afetada pelo evento do gatilho, ou apenas uma vez
      para a declaração SQL. Se nenhum dos dois for especificado,
      <literal>FOR EACH STATEMENT</literal> é usado por padrão.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nome_da_função</replaceable></term>
    <listitem>
     <para>
      Uma função fornecida pelo usuário, declarada como não recebendo
      nenhum argumento e retornando o tipo <literal>trigger</literal>,
      que é executada quando o gatilho dispara.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argumentos</replaceable></term>
    <listitem>
     <para>
      Uma lista opcional de argumentos, separados por vírgula, passada para a
      função quando o gatilho é executado. Os argumentos são constantes cadeia
      de caracteres literais. Também podem ser escritos nomes simples e
      constantes numéricas, mas estes são convertidos em cadeias de caracteres.
      Por favor, verifique como os argumentos do gatilho são acessados dentro da
      função, na descrição da linguagem de implementação da função de gatilho;
      pode ser diferente dos argumentos das função normais.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-notes">
  <title>Observações</title>

  <para>
   Para poder criar um gatilho em uma tabela, o usuário deve possuir o
   privilégio <literal>TRIGGER</literal> na tabela.
  </para>

  <para>
   Nas versões do <productname>PostgreSQL</productname> anteriores a 7.3, era
   necessário declarar as funções dos gatilhos como retornando o tipo
   <type>opaque</type> em vez de <type>trigger</type>. Para permitir a carga das
   cópias de segurança antigas, o comando <command>CREATE TRIGGER</command> aceita
   funções declaradas como retornando <type>opaque</type>, mas mostra uma mensagem e
   muda para <type>trigger</type> o tipo retornado declarado pela função.
  </para>

  <para>
   Deve ser utilizado o comando
   <xref linkend="sql-droptrigger" endterm="sql-droptrigger-title">
   para remover um gatilho.
  </para>
 </refsect1>

 <refsect1 id="R1-SQL-CREATETRIGGER-2">
  <title>Exemplos</title>

  <para>
   A <xref linkend="trigger-example"> contém um exemplo completo.
  </para>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-compatibility">
  <title>Compatibilidade</title>

  <para>
   A declaração <command>CREATE TRIGGER</command> do
   <productname>PostgreSQL</productname> implementa um subconjunto do
   padrão SQL:1999 (O padrão SQL-92 não trata de gatilhos).
   As seguintes funcionalidades estão faltando:

   <itemizedlist>
    <listitem>
     <para>
      O padrão SQL:1999 permite que os gatilhos sejam disparados pela
      atualização de colunas específicas (por exemplo,
      <literal>AFTER UPDATE OF col1, col2</literal>).
     </para>
    </listitem>

    <listitem>
     <para>
      O padrão SQL:1999 permite definir outros nomes (<literal>aliases</literal>)
      para as linhas e tabelas <quote>velhas</quote> e <quote>novas</quote> a
      serem utilizados na definição da ação do gatilho (por exemplo,
      <literal>CREATE TRIGGER ... ON nome_da_tabela REFERENCING
      OLD ROW AS algum_nome NEW ROW AS outro_nome ...</literal>).
      Uma vez que o <productname>PostgreSQL</productname> permite que os
      procedimentos dos gatilhos sejam escritos em qualquer linguagem definida
      pelo usuário, o acesso aos dados é tratado na forma específica da linguagem.
     </para>
    </listitem>

    <listitem>
     <para>
      O <productname>PostgreSQL</productname> somente permite a execução
      de uma função definida pelo usuário para a ação do gatilho. O padrão
      SQL:1999 permite a execução de vários outros comandos SQL, como o
      <command>CREATE TABLE</command>, para a ação do gatilho.
      Esta limitação é fácil de ser superada criando
      uma função definida pelo usuário para executar os comandos desejados.
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   O SQL:1999 especifica que os vários gatilhos devem ser disparados
   na ordem da data de criação. O <productname>PostgreSQL</productname> usa
   a ordem dos nomes, que foi considerada mais conveniente para se trabalhar.
  </para>

  <para>
   A capacidade de especificar várias ações para um único gatilho utilizando
   <literal>OR</literal> é uma extensão do <productname>PostgreSQL</productname>
   ao padrão SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Consulte também</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createfunction" endterm="sql-createfunction-title"></member>
   <member><xref linkend="sql-altertrigger" endterm="sql-altertrigger-title"></member>
   <member><xref linkend="sql-droptrigger" endterm="sql-droptrigger-title"></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
