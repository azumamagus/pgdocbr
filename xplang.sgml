<!--
$PostgreSQL: pgsql/doc/src/sgml/xplang.sgml,v 1.28 2004/12/30 21:45:37 tgl Exp $
-->

 <chapter id="xplang">
  <title id="xplang-title">Linguagens procedurais</title>

  <indexterm zone="xplang">
   <primary>linguagem procedural</primary>
  </indexterm>

  <para>
   O <productname>PostgreSQL</productname> permite que as funções definidas
   pelo usuário sejam escritas em outras linguagens além de SQL e C.
   Estas linguagens são chamadas genericamente de <firstterm>linguagens
   procedurais</firstterm> (<acronym>PL</>s).
   No caso de uma função escrita em uma linguagem procedural, o servidor de
   banco de dados não possui nenhum conhecimento interno sobre como interpretar
   o texto do código fonte da função.
   Em vez disso, a tarefa é passada para um tratador especial que conhece os
   detalhes da linguagem.
   O tratador pode fazer todo o trabalho de análise gramatical e sintática,
   execução, etc., por si próprio, ou pode servir como um
   <quote>elo de ligação</quote> entre o <productname>PostgreSQL</productname>
   e a implementação existente de uma linguagem de programação.
   O tratador em si é uma função escrita na linguagem C, compilada como um
   objeto compartilhado, e carregado conforme necessário, como qualquer outra
   função escrita na linguagem C.
  </para>

  <para>
   Atualmente existem quatro linguagens procedurais disponíveis na distribuição
   padrão <productname>PostgreSQL</productname>:
   <application>PL/pgSQL</application> (<xref linkend="plpgsql">),
   <application>PL/Tcl</application> (<xref linkend="pltcl">),
   <application>PL/Perl</application> (<xref linkend="plperl">) e
   <application>PL/Python</application> (<xref linkend="plpython">).
   Os usuários podem definir outras linguagens.
   Os princípios básicos para o desenvolvimento de uma nova linguagem
   procedural estão descritos no <xref linkend="plhandler">.
  </para>

  <para>
   Estão disponíveis outras linguagens procedurais adicionais, mas não são
   incluídas na distribuição núcleo. O <xref linkend="external-projects">
   contém informações sobre como encontrá-las.
  </para>

  <sect1 id="xplang-install">
   <title>Instalação de linguagem procedural</title>

   <para>
    A linguagem procedural deve ser <quote>instalada</quote> em cada banco de
    dados onde vai ser utilizada. Porém, as linguagens procedurais instaladas
    no banco de dados <literal>template1</literal> ficam disponíveis
    automaticamente em todos os bancos de dados criados após sua instalação, uma
    vez que suas entradas em <literal>template1</> são copiadas pelo comando
    <command>CREATE DATABASE</>.
    Portanto, o administrador de banco de dados pode decidir quais linguagens
    ficarão disponíveis em quais bancos de dados, e pode tornar algumas
    linguagens disponíveis por padrão se assim o decidir.
   </para>

   <para>
    Para as linguagens fornecidas na distribuição padrão, pode ser utilizado o
    programa <xref linkend="app-createlang"> para instalar a linguagem em vez
    de executar os passos manualmente. Por exemplo, para instalar a linguagem
    <application>PL/pgSQL</application> no banco de dados
    <literal>template1</literal> é utilizado:
<programlisting>
createlang plpgsql template1
</programlisting>
    O procedimento manual descrito abaixo somente é recomendado para a
    instalação de linguagens personalizadas que o programa
    <command>createlang</command> desconhece.
   </para>

   <procedure>
    <title>
     Instalação manual de linguagem procedural
    </title>

    <para>
     A linguagem procedural é instalada no banco de dados em quatro passos,
     que devem ser efetuados por um superusuário do banco de dados. O
     programa <command>createlang</command> automatiza tudo menos o
     <xref linkend="xplang-install-cr1">.
    </para>

    <step performance="required" id="xplang-install-cr1">
     <para>
      O objeto compartilhado contendo o tratador da linguagem deve ser compilado
      e instalado em um diretório de biblioteca apropriado. Funciona da mesma
      maneira que a construção e instalação de módulos contendo funções C
      regulares definidas pelo usuário; consulte a <xref linkend="dfunc">.
      Geralmente o tratador da linguagem depende de uma biblioteca externa que
      disponibiliza o mecanismo verdadeiro da linguagem de programação; se for
      assim, esta biblioteca também deve ser instalada.
     </para>
    </step>

    <step performance="required" id="xplang-install-cr2">
     <para>
      O tratador deve ser declarado pelo comando:
<synopsis>
CREATE FUNCTION <replaceable>nome_da_função_tratadora</replaceable>()
    RETURNS language_handler
    AS '<replaceable>caminho_para_o_objeto_compartilhado</replaceable>'
    LANGUAGE C;
</synopsis>
      O tipo especial retornado <type>language_handler</type> informa
      ao sistema de banco de dados que a função não retorna um dos
      tipos de dado <acronym>SQL</acronym> definidos, e que não pode ser
      utilizada diretamente nas declarações <acronym>SQL</acronym>.
     </para>
    </step>

    <step performance="optional" id="xplang-install-cr3">
     <para>
      Opcionalmente o tratador da linguagem pode disponibilizar uma função
      <quote>validadora</quote> para verificar se a definição da função está
      correta, sem na verdade executá-la. Caso exista, a função validadora é
      chamada pelo comando <command>CREATE FUNCTION</>.
      Se o tratador disponibilizar uma função validadora, esta deve ser
      declarada por um comando como:
<synopsis>
CREATE FUNCTION <replaceable>nome_da_função_validadora</replaceable>(oid)
    RETURNS void
    AS '<replaceable>caminho_para_o_objeto_compartilhado</replaceable>'
    LANGUAGE C;
</synopsis>
     </para>
    </step>

    <step performance="required" id="xplang-install-cr4">
     <para>
      A linguagem procedural deve ser declarada pelo comando:
<synopsis>
CREATE <optional>TRUSTED</optional> <optional>PROCEDURAL</optional> LANGUAGE <replaceable>nome_da_linguagem</replaceable>
    HANDLER <replaceable>nome_da_função_tratadora</replaceable>
    <optional>VALIDATOR <replaceable>nome_da_função_validadora</replaceable></optional> ;
</synopsis>
      A palavra opcional <literal>TRUSTED</literal> (confiável) especifica que
      é permitido aos usuários comuns do banco de dados, que não possuem
      privilégio de superusuário, utilizarem esta linguagem para criar
      procedimentos de funções e gatilhos.
      Uma vez que as funções na linguagem procedural são executadas dentro do
      servidor de banco de dados, o sinalizador <literal>TRUSTED</literal>
      somente deve ser especificado para as linguagens que não permitem acesso
      às funcionalidades internas do servidor de banco de dados, nem ao sistema
      de arquivos. As linguagens
      <application>PL/pgSQL</application>,
      <application>PL/Tcl</application> e
      <application>PL/Perl</application>
      são consideradas confiáveis; as linguagens
      <application>PL/TclU</application>,
      <application>PL/PerlU</application> e
      <application>PL/PythonU</application>
      foram projetadas para fornecer funcionalidades ilimitadas,
      <emphasis>não</emphasis> devendo ser marcadas como confiáveis.
     </para>
    </step>
   </procedure>

   <para>
    O <xref linkend="xplang-install-example"> mostra como funciona o
    procedimento de instalação manual com a linguagem
    <application>PL/pgSQL</application>.
   </para>

   <example id="xplang-install-example">
    <title>Instalação manual do PL/pgSQL</title>

     <para>
      O comando abaixo informa ao servidor de banco de dados onde encontrar o
      objeto compartilhado da função tratadora de chamadas da linguagem
      <application>PL/pgSQL</application>:

<programlisting>
CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler AS
    '$libdir/plpgsql' LANGUAGE C;
</programlisting>
     </para>

     <para>
      A linguagem <application>PL/pgSQL</application> possui uma função
      validadora, portanto esta também é declarada:

<programlisting>
CREATE FUNCTION plpgsql_validator(oid) RETURNS void AS
    '$libdir/plpgsql' LANGUAGE C;
</programlisting>
     </para>

     <para>
      Depois o comando
<programlisting>
CREATE TRUSTED PROCEDURAL LANGUAGE plpgsql
    HANDLER plpgsql_call_handler
    VALIDATOR plpgsql_validator;
</programlisting>
      define que a função declarada anteriormente deve ser chamada para os
      procedimentos de função e gatilho onde o atributo de linguagem for
      <literal>plpgsql</literal>.
     </para>
  </example>

   <para>
    Na instalação padrão do <productname>PostgreSQL</productname> o tratador
    para a linguagem <application>PL/pgSQL</application> é construído e
    instalado no diretório de <quote>biblioteca</quote>.
    Se o suporte à linguagem <application>Tcl</application> estiver configurado,
    os tratadores para <application>PL/Tcl</application> e
    <application>PL/TclU</application> também serão construídos e instalados
    no mesmo local.
    Da mesma maneira, os tratadores para <application>PL/Perl</application> e
    <application>PL/PerlU</application> serão construídos e instalados se o
    suporte à linguagem Perl estiver configurado, e
    <application>PL/PythonU</application> será instalado se o suporte à
    linguagem Python estiver configurado.
   </para>

  </sect1>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
